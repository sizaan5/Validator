// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Validator
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
import UIKit
@_exported import Validator
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class Validation {
  public enum ValidationType {
    case email
    case password
    case name
    public static func == (a: Validator.Validation.ValidationType, b: Validator.Validation.ValidationType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func configure(appName: Swift.String) -> Swift.Bool
  public static func checkValidation(on type: Validator.Validation.ValidationType, of str: Swift.String) -> Swift.Bool
  public static func openTestViewController(in navigationController: UIKit.UINavigationController, color: UIKit.UIColor, text: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TestViewTesting : UIKit.UIView {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var lblText: UIKit.UILabel!
  @_Concurrency.MainActor(unsafe) public var delegate: (any Validator.ViewDelegate)?
  @_Concurrency.MainActor(unsafe) public class func loadFromNib() -> Validator.TestViewTesting
  @objc @IBAction @_Concurrency.MainActor(unsafe) public func clickAction(_ sender: UIKit.UIButton)
  @objc @IBAction @_Concurrency.MainActor(unsafe) public func clickInsideAction(_ sender: UIKit.UIButton)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol ViewDelegate {
  func click()
  func clickInside()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TestViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Validator.TestViewController : Validator.ViewDelegate {
  @_Concurrency.MainActor(unsafe) public func click()
  @_Concurrency.MainActor(unsafe) public func clickInside()
}
@_hasMissingDesignatedInitializers public class TestFile {
  public static func abc()
  public static func openTestViewController(in navigationController: UIKit.UINavigationController, color: UIKit.UIColor, text: Swift.String)
  @objc deinit
}
extension Validator.Validation.ValidationType : Swift.Equatable {}
extension Validator.Validation.ValidationType : Swift.Hashable {}
